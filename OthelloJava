
import java.util.Scanner;

public class OthelloGame {

    private static int size  = 8;
    private static String player1 = "b";
    private static String player2 = "w";
    private String othelloBoard[][];

    public void displayBoard(){
        this.othelloBoard = new String[size][size];

        System.out.println(" ");
        System.out.println(" ");
        for(int column = 0; column < size;column++){
            System.out.println(column + 0 + " ");
        }
        System.out.println(" ");

        for(int row = 0; row < size; row++){
            System.out.println(" ");
            for(int column = 0; column < size; column++){
                System.out.println("-----");
            }
            System.out.println(" ");
            System.out.println(row + 0 + " ");

            for(int column = 0; column < size; column++){
                System.out.println("| ");
                if(this.othelloBoard[row][column] == " "){
                    System.out.println(" ");
                }
                else{
                    System.out.println(this.othelloBoard[row][column]);
                }
                System.out.println("|");
            }
        }

        System.out.println(" ");
        for (int column = 0; column < size;column++){
            System.out.println("-----");
        }
        System.out.println(" ");
        System.out.println(" ");

        this.othelloBoard[(size/2) -1][(size/2) -1] = "b ";
        this.othelloBoard[(size/2) -1][size/2] = "w ";
        this.othelloBoard[size/2][(size/2) -1] = "w ";
        this.othelloBoard[size/2][size/2] = "b ";

    }

    public int putToken(int row, int column, String token){
        int tokenWon = 0;

        if(this.othelloBoard[row][column] != " "){
            return 0;
        }
        this.othelloBoard[row][column] = token;

        String opponentToken;

        if(token == player1){
            opponentToken = player2;
        }
        else{
            opponentToken = player2;
        }

        int tokenPosition = -1;
        for(int i = column + 1; i < size && this.othelloBoard[row][i] != " " && tokenPosition == -1; i++){
            if(this.othelloBoard[row][i] == token){
                tokenPosition = i;
            }
        }
        if(tokenPosition != -1 && tokenPosition > column + 1){
            for(int c = column +1; c < tokenPosition; c++){
                this.othelloBoard[row][c] = token;
                tokenWon++;
            }
        }

        tokenPosition = -1;
        for(int c = column -1; c >= 0 && this.othelloBoard[row][c] != " " && tokenPosition == 1; c--){
            if(this.othelloBoard[row][c] == token){
                tokenPosition = c;
            }
        }
        if(tokenPosition != -1 && tokenPosition < column -1){
            for(int c = column -1; c > tokenPosition; c--){
                this.othelloBoard[row][column] = token;
                tokenWon++;
            }
        }

        tokenPosition = -1;
        for(int r = row -1; r >= 0 && this.othelloBoard[r][column] != " " && tokenPosition == -1; r-- ){
            if(this.othelloBoard[r][column] == token){
                tokenPosition = r;
            }
        }
        if(tokenPosition != -1 && tokenPosition < row -1){
            for(int r = row -1; r > tokenPosition; r--){
            this.othelloBoard[r][column] = token;
            tokenWon++;
            }
        }

        tokenPosition = -1;
        for(int r = row + 1; r < size && this.othelloBoard[r][column] != " " && tokenPosition == -1; r++){
            if(this.othelloBoard[r][column] == token){
                tokenPosition = r;
            }
        }
        if(tokenPosition != -1 && tokenPosition > row +1){
            for(int r = row + 1; r < tokenPosition; r++){
                this.othelloBoard[r][column] = token;
                tokenWon++;
            }
        }

        tokenPosition = -1;
        int c = column -1;
        for(int r = row -1; c >= 0 && r >= 0 && this.othelloBoard[r][c] != " " && tokenPosition == -1; r--){
            if(this.othelloBoard[r][c] == token){
                tokenPosition = r;

            }
            c--;
        }
        if(tokenPosition != -1 && tokenPosition < row -1){
            c = column -1;
            for(int r = row -1; r >tokenPosition; r--){
                this.othelloBoard[r][c] = token;
                tokenWon++;
                c--;
            }
        }

        tokenPosition = -1;
        c = column + 1;
        for(int r = row -1; c < size && r >= 0 && this.othelloBoard[r][c] != " " && tokenWon == -1; r--){
            if(this.othelloBoard[r][c] == token){
                tokenPosition = r;
            }
            c++;
        }
        if(tokenPosition != -1 && tokenPosition < row -1){
            c = column + 1;
            for (int r = row - 1; r > tokenPosition; r--){
                this.othelloBoard[r][c] = token;
                tokenWon++;
                c++;
            }
        }

        tokenPosition = -1;
        c = column -1;
        for(int r = row +1; c >= 0 && r < size && this.othelloBoard[r][c] != " " &&tokenPosition == -1; r++){
            if(this.othelloBoard[r][c] == token){
                tokenPosition = r;
            }
            c--;
        }
        if(tokenPosition != -1 && tokenPosition > row + 1){
            c = column - 1;
            for(int r = row + 1; r < tokenPosition; r++){
                this.othelloBoard[r][c] = token;
                tokenWon++;
                c++;
            }
        }

        tokenPosition = -1;
        c = column + 1;
        for(int r = row + 1; c < size && this.othelloBoard[r][c] != " " && tokenPosition == -1; r++){
            if(this.othelloBoard[r][c] == token){
                tokenPosition = r;
            }
            c++;
        }
        if(tokenPosition != -1 && tokenPosition > row + 1){
            c = column + 1;
            for(int r = row + 1; r < tokenPosition; r++){
                this.othelloBoard[r][c] = token;
                tokenWon++;
                c++;
            }
        }

        if(tokenWon == 0){
            this.othelloBoard[row][column] = " ";
        }
        return tokenWon;
    }

    public boolean canMove(){
        int countBlackTokens = 0;
        int countWhiteTokens = 0;

        for(int row = 0; row < size; row++){
            for(int column = 0; column < size; column++){
                if(this.othelloBoard[row][column] == "b "){
                    countBlackTokens++;
                }
                if(this.othelloBoard[row][column] == "w "){
                    countWhiteTokens++;
                }
            }
        }
        if(countBlackTokens == 0 || countWhiteTokens == 0){
            return false;
        }
        if((countBlackTokens + countWhiteTokens) == 16){
            return false;
        }

        return true;
    }

    public boolean gameOver(){
        System.out.println("Eljuego termino");
        int counBlackTokens = 0;
        int coutnWhiteTokens = 0;

        for(int row = 0; row < size; row++){
            for(int column = 0; column < size; column++){
                if(this.othelloBoard[row][column] == "b "){
                    counBlackTokens++;
                }
                if(this.othelloBoard[row][column] == "w "){
                    coutnWhiteTokens++;
                }
            }
        }

        if(counBlackTokens > coutnWhiteTokens){
            System.out.println("El jugador 1 gano! ");
            System.out.println(" ");
        }
        else if(coutnWhiteTokens > counBlackTokens){
            System.out.println("El jugador 2 gano! ");
            System.out.println(" ");
        }
        else{
            System.out.println("Empate! ");
            System.out.println(" ");
        }

        return true;
    }

    public void Player1(){
        int row, column;
        boolean cantMove;

        System.out.println("Tu turno jugador " + player1);
        System.out.println(" ");

        do{
            Scanner sc = new Scanner(System.in);
            cantMove = false;
            System.out.println("Pong el numero de fila en la que quiere mover la ficha: ");
            row = sc.nextInt();
            while(row < 0 || row >= size){
                try {
                    if(row < 0 || row >= size){
                        throw new NotValidPosition();
                    }
                }
                catch (NotValidPosition NTP){
                    System.out.println(NTP);
                    System.out.println("Ponge el numero de fila en la que quiere mover la ficha: ");
                    row = sc.nextInt();
                }
            }
            System.out.println("ponga el numero de la columna en la que quiere mover la ficha: ");
            column = sc.nextInt();
            while(column < 0 || column >= size){
                try {
                    if(column < 0 || column >= size){
                        throw new NotValidPosition();
                    }
                }
                catch (NotValidPosition NTP){
                    System.out.println(NTP);
                    System.out.println("Ponge el numero de la columna en la que quiere mover la ficha: ");
                    column = sc.nextInt();
                }
            }

            if(this.othelloBoard[row][column] != " "){
                System.out.println(" ");
                System.out.println("Seleccione una fila o column a vacia para mover una ficha");
                System.out.println(" ");
                cantMove = true;
            }
            else {
                int tokensWon = putToken(row, column, player1);
                if (tokensWon == 0) {
                    System.out.println(" ");
                    System.out.println("Moviemiento invalido");
                    System.out.println(" ");

                    cantMove = true;
                } else if (tokensWon == 1) {
                    System.out.println(" ");
                    System.out.println("Una ficha ganada");
                    System.out.println(" ");
                } else {
                    System.out.println("Ganadas " + tokensWon + " Fichas");
                    System.out.println(" ");
                }
            }
        }
        while(cantMove);

        System.out.println("Tabla actualiza");
        System.out.println(" ");

        displayBoard();

        if(canMove()){
            player2();
        }
        else{
            gameOver();
        }

    }
    public void Player2(){
        int row, column;
        boolean cantMove;

        System.out.println("Tu turno jugador " + player2);
        System.out.println(" ");

        do{
            Scanner sc = new Scanner(System.in);
            cantMove = false;
            System.out.println("Pong el numero de fila en la que quiere mover la ficha: ");
            row = sc.nextInt();
            while(row < 0 || row >= size){
                try {
                    if(row < 0 || row >= size){
                        throw new NotValidPosition();
                    }
                }
                catch (NotValidPosition NTP){
                    System.out.println(NTP);
                    System.out.println("Ponge el numero de fila en la que quiere mover la ficha: ");
                    row = sc.nextInt();
                }
            }
            System.out.println("ponga el numero de la columna en la que quiere mover la ficha: ");
            column = sc.nextInt();
            while(column < 0 || column >= size){
                try {
                    if(column < 0 || column >= size){
                        throw new NotValidPosition();
                    }
                }
                catch (NotValidPosition NTP){
                    System.out.println(NTP);
                    System.out.println("Ponge el numero de la columna en la que quiere mover la ficha: ");
                    column = sc.nextInt();
                }
            }

            if(this.othelloBoard[row][column] != " "){
                System.out.println(" ");
                System.out.println("Seleccione una fila o column a vacia para mover una ficha");
                System.out.println(" ");
                cantMove = true;
            }
            else {
                int tokensWon = putToken(row, column, player2);
                if (tokensWon == 0) {
                    System.out.println(" ");
                    System.out.println("Moviemiento invalido");
                    System.out.println(" ");

                    cantMove = true;
                } else if (tokensWon == 1) {
                    System.out.println(" ");
                    System.out.println("Una ficha ganada");
                    System.out.println(" ");
                } else {
                    System.out.println("Ganadas " + tokensWon + " Fichas");
                    System.out.println(" ");
                }
            }
        }
        while(cantMove);

        System.out.println("Tabla actualiza");
        System.out.println(" ");

        displayBoard();

        if(canMove()){
            player1();
        }
        else{
            gameOver();
        }
    }
    
    public static void main(String[] args) {

        OthelloGame juego1 = new OthelloGame();

        juego1.displayBoard();
        juego1.Player1();
    }
}
